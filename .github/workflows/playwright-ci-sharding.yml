name: Sharded - Test Execution - Playwright
run-name: ${{ format('{0} - shard {1}% - playwright test execution', inputs.env, inputs.shard_percent) }}

on:
  workflow_dispatch:
    inputs:
      env:
        description: Select Test Environment
        type: choice
        default: staging
        options:
          - staging
          - prod

      shard_percent:
        description: Shard Percentage (% of work distribution)
        type: number
        default: 25

      cli_args:
        description: Additional CLI Arguments (--project "Google Chrome" / -g "Search User")
        type: string
        required: false

      publish_report:
        description: Publish Test Report
        type: boolean
        default: true

permissions:
  id-token: write
  contents: read
  pages: write

env:
  TESTENV: ${{ inputs.env }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  ROLE_VAULT_ENCRYPTION_KEY: ${{ secrets.ROLE_VAULT_ENCRYPTION_KEY }}
  PUBLISH_REPORT: ${{ inputs.publish_report }}

jobs:
  determine-shards:
    runs-on: ubuntu-latest
    outputs:
      shardIndexes: ${{ steps.shard-generator.outputs.shardIndexes }}
      shardTotal: ${{ steps.shard-generator.outputs.shardTotal }}

    steps:
      - name: Create Shard Indexes
        id: shard-generator
        run: |
          percent=${{ inputs.shard_percent }}
          shard_total=$(( (100 + percent - 1) / percent ))
          shard_indexes=$(seq -s, 1 $shard_total)

          echo "shardIndexes: [$shard_indexes]"
          echo "shardTotal: [$shard_total]"
          echo "shardIndexes=[$shard_indexes]" >> "$GITHUB_OUTPUT"
          echo "shardTotal=[$shard_total]" >> "$GITHUB_OUTPUT"

  test:
    needs: [determine-shards]
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        shardIndex: ${{ fromJson(needs.determine-shards.outputs.shardIndexes) }}
        shardTotal: ${{ fromJson(needs.determine-shards.outputs.shardTotal) }}
    name: "test - ${{ matrix.shardIndex }} / ${{ matrix.shardTotal }}"

    services:
      mongo:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

      rolevault:
        image: ghcr.io/nayeemjohny/rolevault:latest
        env:
          JWT_SECRET: ${{env.JWT_SECRET}}
          TESTENV: ${{env.TESTENV}}
          MONGODB_URI: mongodb://mongo:27017/${{env.TESTENV}}-rolevault-db
        ports:
          - 5000:5000
          - 5001:5001
        options: >-
          --user root

    steps:
      - name: Checkout Test Repo
        uses: actions/checkout@v5

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: PreTest - ESLint & TS Compile
        run: npm run pretest

      - name: Run Playwright tests
        run: npx playwright test ${{ inputs.cli_args }} --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: test-results-${{ matrix.shardIndex }}
          if-no-files-found: ignore
          retention-days: 30
          path: |
            blob-report
            allure-results
            screenshots
            test-results
            application-logs.log
            network-reports

  generate-reports:
    needs: [test]
    if: ${{ !cancelled() && needs.test.result != 'skipped' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Test Repo
        uses: actions/checkout@v5

      - name: Install dependencies
        run: npm ci

      - name: Download all test artifacts for network report
        uses: actions/download-artifact@v5
        with:
          path: all-test-results
          pattern: test-results-*
          merge-multiple: true

      - name: Generate Playwright HTML Reports
        run: npx playwright merge-reports --reporter html ./all-test-results/blob-report

      - name: Generate Network Report
        if: success() || failure()
        run: npm run generate-network-report

      - name: Generate Allure Report
        if: success() || failure()
        uses: NayeemJohnY/actions/allure-report-with-history@main
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          allure-results-dir: ./all-test-results/allure-results
          allure-report-dir: ./allure-report

      - name: Upload Consolidated Test Reports
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: test-reports-consolidated
          path: |
            playwright-report
            network-reports
            allure-report

      - name: Prepare GitHub Pages Content
        id: prepare-pages
        if: ${{ (success() || failure()) && env.PUBLISH_REPORT == 'true' }}
        uses: NayeemJohnY/actions/prepare-github-pages@main
        with:
          allure-report-dir: ./allure-report
          playwright-report-dir: ./playwright-report

      - name: Deploy GitHub Pages
        if: ${{ (success() || failure()) && steps.prepare-pages.outcome == 'success' && env.PUBLISH_REPORT == 'true' }}
        uses: NayeemJohnY/actions/deploy-github-pages-site@main
